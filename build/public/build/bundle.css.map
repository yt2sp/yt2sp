{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  const REDIRECT = window.location.href.slice(0, -1)\n  const SPOTIFY_STATE = 'yt2sp'\n  const GOOGLE_SCOPE = 'https://www.googleapis.com/auth/youtube.readonly'\n  const SPOTIFY_SCOPE =\n    'user-read-private user-read-email playlist-read-private playlist-modify-private'\n  var popup\n\n  var spotifyUser\n  var isGoogleAuthorized\n  var youtubePlaylists\n  $: spotifyUserId = spotifyUser && spotifyUser.id\n  $: spotifyPlaylists = loadSpotifyPlaylists(spotifyUserId)\n  var selectedYoutube\n  var selectedSpotify\n\n  $: syncPossible =\n    selectedYoutube && selectedSpotify && spotifyUserId && isGoogleAuthorized\n\n  var youtubeItems = []\n  var spotifyItems = []\n  var syncTable = []\n  var syncDone = []\n  var syncCompleted\n  var checkboxState = false\n\n  var spotifyToken = localStorage.getItem('spotify_token')\n\n  window.spotifyCallback = (payload) => {\n    popup.close()\n    spotifyToken = payload\n    localStorage.setItem('spotify_token', spotifyToken || '')\n    verifySpotify()\n  }\n\n  function clearSpotifyAuth() {\n    spotifyToken = undefined\n    spotifyUser = undefined\n    localStorage.removeItem('spotify_token')\n  }\n\n  var url = new URL(window.location.href.replace('#', '?'))\n  if (url.searchParams.get('state') == SPOTIFY_STATE) {\n    window.opener.spotifyCallback(url.searchParams.get('access_token'))\n  }\n\n  function spotifyRequest(url, payload) {\n    var h = { Authorization: `Bearer ${spotifyToken}` }\n    if (payload)\n      return fetch(url, {\n        headers: h,\n        method: 'POST',\n        body: JSON.stringify(payload),\n      })\n    else return fetch(url, { headers: h })\n  }\n\n  async function verifySpotify() {\n    var r = await spotifyRequest('https://api.spotify.com/v1/me')\n    if (r.ok) {\n      spotifyUser = await r.json()\n    } else {\n      clearSpotifyAuth()\n    }\n  }\n\n  if (spotifyToken) {\n    verifySpotify()\n  }\n\n  function authSpotify() {\n    var url = `https://accounts.spotify.com/authorize?client_id=${SPOTIFY_CLIENTID}&redirect_uri=${REDIRECT}&scope=${SPOTIFY_SCOPE}&response_type=token&state=${SPOTIFY_STATE}`\n    if (spotifyUser) {\n      url += '&show_dialog=true'\n    }\n    popup = window.open(url, 'Login with Spotify', 'width=800,height=600')\n  }\n  let tokenClient\n\n  function gapiInit() {\n    gapi.client.init({}).then(function () {\n      gapi.client.load(\n        'https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest'\n      )\n    })\n  }\n\n  function gapiLoad() {\n    gapi.load('client', gapiInit)\n  }\n\n  function gisInit() {\n    tokenClient = google.accounts.oauth2.initTokenClient({\n      client_id: GOOGLE_CLIENTID,\n      scope: GOOGLE_SCOPE,\n      callback: '',\n    })\n  }\n\n  window.handleCredentialResponse = (response) => {\n    isGoogleAuthorized = true\n    tokenClient.callback = async (resp) => {\n      if (resp.error !== undefined) {\n        throw resp\n      }\n\n      var page\n      youtubePlaylists = []\n      do {\n        var r = await gapi.client.youtube.playlists.list({\n          part: ['id,snippet,contentDetails'],\n          maxResults: 50,\n          mine: true,\n          pageToken: page,\n        })\n        youtubePlaylists = youtubePlaylists.concat(r.result.items)\n        page = r.result.nextPageToken || null\n      } while (page)\n    }\n    if (gapi.client.getToken() === null) {\n      tokenClient.requestAccessToken({ prompt: 'consent' })\n    } else {\n      tokenClient.requestAccessToken({ prompt: '' })\n    }\n  }\n\n  async function loadSpotifyPlaylists(user) {\n    if (!user) return []\n    var page\n    var spotifyPlaylists = []\n    do {\n      var r = await spotifyRequest(\n        page || 'https://api.spotify.com/v1/me/playlists?limit=50'\n      ).then((r) => r.json())\n      spotifyPlaylists = spotifyPlaylists.concat(r.items)\n      page = r.next\n    } while (page)\n    return spotifyPlaylists\n  }\n\n  function formatSpotifyItem(i) {\n    if (i)\n      return (\n        i.artists.map((artist) => artist.name).join(', ') +\n        '-' +\n        i.name +\n        ' (' +\n        i.album.name +\n        ', ' +\n        i.album.release_date +\n        ')'\n      )\n    else return '...'\n  }\n\n  class SyncItem {\n    constructor(source) {\n      this.source = source\n      this.query = this.source.snippet.title\n      this.candidates = []\n      this.target = null\n      this.selected = false\n    }\n  }\n\n  async function findCandidates(query) {\n    var r = await spotifyRequest(\n      `https://api.spotify.com/v1/search?q=${query}&type=artist,track`\n    )\n    r = await r.json()\n    return r.tracks.items\n  }\n\n  async function loadYoutubeItems() {\n    var page\n    youtubeItems = []\n    do {\n      var r = await gapi.client.youtube.playlistItems.list({\n        part: ['snippet,contentDetails'],\n        maxResults: 50,\n        playlistId: selectedYoutube.id,\n        pageToken: page,\n      })\n      youtubeItems = youtubeItems.concat(r.result.items)\n      page = r.result.nextPageToken || null\n    } while (page)\n  }\n\n  async function loadSpotifyItems() {\n    var page\n    spotifyItems = []\n    do {\n      var r = await spotifyRequest(\n        page || selectedSpotify.tracks.href + '?limit=50'\n      ).then((r) => r.json())\n      spotifyItems = spotifyItems.concat(r.items)\n      page = r.next\n    } while (page)\n  }\n\n  function isDuplicate(item) {\n    if (item && spotifyItems.length)\n      return spotifyItems.find((i) => i.track.id == item.id)\n    else return false\n  }\n\n  async function sync() {\n    await loadYoutubeItems()\n    await loadSpotifyItems()\n\n    syncTable = []\n    youtubeItems.forEach((youtubeItem) => {\n      syncTable = [...syncTable, new SyncItem(youtubeItem)]\n    })\n\n    syncTable.forEach(async (item, index) => {\n      item.candidates = await findCandidates(item.query)\n\n      if (!item.candidates.length) {\n        item.query = item.query\n          .replace(/ *[\\[\\(\\{][^)]*[\\)\\]\\}] */g, '')\n          .replace(/ *(HD|HQ|720p|1080p|4k) */g, '')\n          .replace(/ *(of+icial *)?(music *)?video/g, '')\n        item.candidates = await findCandidates(item.query)\n      }\n\n      if (!item.candidates.length) {\n        item.query = item.query\n          .replace(/lyrics?/gi, '')\n          .replace(/(feat|ft|featuring)\\..*$/gi, '')\n          .replace(/with.*$/gi, '')\n        item.candidates = await findCandidates(item.query)\n      }\n\n      if (!item.candidates.length) {\n        item.query = item.query.split('-')[1] || item.query.split('-')[0]\n        item.candidates = await findCandidates(item.query)\n      }\n\n      item.target = item.candidates[0]\n      item.selected = item.target && !isDuplicate(item.target)\n      syncTable[index] = item\n    })\n  }\n\n  function completeSync() {\n    syncDone = syncTable.filter((i) => i.selected)\n    if (syncDone.length)\n      syncCompleted = spotifyRequest(selectedSpotify.tracks.href, {\n        uris: syncDone.map((i) => i.target.uri),\n      })\n  }\n\n  $: syncLength = syncTable\n    .filter((i) => i.selected)\n    .filter((i) => !isDuplicate(i.target)).length\n</script>\n\n<style>\n  td {\n    vertical-align: middle;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  th {\n    background: lightgrey;\n  }\n  select {\n    width: 300px;\n    overflow: hidden;\n    padding: 2px;\n  }\n  tr {\n    height: 40px;\n  }\n  input {\n    padding: 2px;\n  }\n  .sync tr:nth-child(odd) {\n    background: #eee;\n  }\n  table {\n    border-collapse: collapse;\n  }\n</style>\n\n<svelte:head>\n  <script\n    async\n    defer\n    src=\"https://apis.google.com/js/api.js\"\n    on:load={gapiLoad}>\n\n  </script>\n  <script\n    async\n    defer\n    src=\"https://accounts.google.com/gsi/client\"\n    on:load={gisInit}>\n\n  </script>\n</svelte:head>\n<main>\n\n  {#if !syncTable.length}\n    <h1>YouTube To Spotify</h1>\n    <p>\n      <a href=\"https://github.com/yt2sp/yt2sp\">Github page</a>\n    </p>\n    <p>\n      This tool synchronizes your YouTube playlists to Spotify playlists,\n      intelligently searching for artist & title based on the YouTube video's\n      name, skipping duplicates and offering the possibility for manual\n      overrides.\n    </p>\n\n    <p>\n      This can be useful if you use YouTube for music discovery, add the music\n      videos you like to a playlist and want to ensure that your discovered\n      items are added to Spotify as well which you use for regular music\n      listening.\n    </p>\n\n    <p>\n      In order to work, it requires access to your YouTube and Spotify accounts,\n      but it runs entirely in your browser and communicates only with YouTube\n      and Spotify servers and does not store any data at all.\n    </p>\n\n    <h2>Step 1: Connect accounts:</h2>\n\n    <b>Google:</b>\n    <p>\n\n      {#if isGoogleAuthorized}\n        Signed in - reload to sign in again\n      {:else}\n        <div\n          id=\"g_id_onload\"\n          data-client_id=\"985321036628-tlp6avu4gnudpr6dpms504lstmoj9uqm.apps.googleusercontent.com\"\n          data-context=\"signin\"\n          data-ux_mode=\"popup\"\n          data-callback=\"handleCredentialResponse\"\n          data-auto_prompt=\"false\" />\n\n        <div\n          class=\"g_id_signin\"\n          data-type=\"standard\"\n          data-shape=\"rectangular\"\n          data-theme=\"outline\"\n          data-text=\"signin_with\"\n          data-size=\"large\"\n          data-logo_alignment=\"left\" />\n      {/if}\n    </p>\n\n    <p>\n      <b>Spotify:</b>\n      {#if spotifyUser}Signed in as {spotifyUser.display_name}{/if}\n      <button on:click={authSpotify}>\n        {#if spotifyUser}Sign out{:else}Sign in{/if}\n      </button>\n    </p>\n\n    <h2>Step 2: Select source and target playlists:</h2>\n\n    <table>\n      <tr>\n        <td>\n          <b>Source YouTube playlist:</b>\n        </td>\n        <td>\n\n          {#if youtubePlaylists}\n            {#if youtubePlaylists.length}\n              <select bind:value={selectedYoutube}>\n                {#each youtubePlaylists as playlist}\n                  <option value={playlist}>\n                    {playlist.snippet.title} ({playlist.contentDetails.itemCount}\n                    items)\n                  </option>\n                {/each}\n              </select>\n            {:else}...{/if}\n          {/if}\n\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <b>Target Spotify playlist:</b>\n        </td>\n        <td>\n          {#await spotifyPlaylists}\n            ...\n          {:then spotifyPlaylists}\n            {#if spotifyPlaylists.length}\n              <select bind:value={selectedSpotify}>\n                {#each spotifyPlaylists as playlist}\n                  <option value={playlist}>\n                    {playlist.name} ({playlist.tracks.total} items)\n                  </option>\n                {/each}\n              </select>\n            {:else}...{/if}\n          {/await}\n\n        </td>\n      </tr>\n    </table>\n\n    <h2>Step 3: Sync!</h2>\n\n    <button on:click={sync} disabled={!syncPossible}>\n      Search for items to be synchronized\n    </button>\n  {:else if !syncDone.length}\n    <h2>Review sync actions</h2>\n    <button on:click={completeSync} disabled={syncLength === 0}>\n      Sync {syncLength} items\n    </button>\n    &nbsp;\n    <button on:click={() => (syncTable = [])}>Cancel sync</button>\n\n    <table class=\"sync\" style=\"width: 100%; table-layout: fixed\">\n      <tr>\n        <th width=\"33%\">Source video</th>\n        <th width=\"33%\">Search term</th>\n        <th width=\"40px\" />\n        <th width=\"305px\">Potential targets</th>\n        <th width=\"33%\">Selected target</th>\n        <th width=\"30px\">\n          <input\n            type=\"checkbox\"\n            title=\"Select all\"\n            bind:checked={checkboxState}\n            on:click={() => {\n              syncTable = syncTable.map((i) => {\n                i.selected = !checkboxState && !isDuplicate(i.target)\n                return i\n              })\n            }} />\n        </th>\n      </tr>\n      {#each syncTable as item}\n        <tr>\n          <td>\n            <a\n              href={'https://www.youtube.com/watch?v=' + item.source.contentDetails.videoId}\n              title={item.source.snippet.title}>\n              {item.source.snippet.title}\n            </a>\n          </td>\n          <td>\n            <input type=\"text\" style=\"width: 100%\" bind:value={item.query} />\n          </td>\n          <td>\n            <button\n              on:click={async () => {\n                item.candidates = await findCandidates(item.query)\n                item.target = item.candidates[0]\n                item.selected = item.target && !isDuplicate(item.target)\n              }}>\n              🔎\n            </button>\n          </td>\n          <td>\n            {#await item.candidates}\n              ...\n            {:then candidates}\n              {#if candidates.length}\n                <!-- svelte-ignore a11y-no-onchange -->\n                <select\n                  bind:value={item.target}\n                  on:change={() => {\n                    item.selected = !isDuplicate(item.target)\n                  }}>\n                  {#each candidates as candidate}\n                    <option value={candidate}>\n                      {formatSpotifyItem(candidate)}\n                    </option>\n                  {/each}\n                </select>\n              {:else}-{/if}\n            {/await}\n          </td>\n          <td>\n            {#await item.target}\n              ...\n            {:then i}\n              {#if i}\n                <a href={i.external_urls.spotify} title={formatSpotifyItem(i)}>\n                  {formatSpotifyItem(i)}\n                </a>\n              {/if}\n            {/await}\n          </td>\n          <td style=\"text-align: center\">\n\n            <input\n              type=\"checkbox\"\n              bind:checked={item.selected}\n              disabled={isDuplicate(item.target)} />\n\n          </td>\n        </tr>\n      {/each}\n    </table>\n  {:else}\n    <h2>Completing sync</h2>\n    Syncing {syncDone.length} items:\n    <ol>\n      {#each syncDone as i}\n        <li>{i.source.snippet.title} → {formatSpotifyItem(i.target)}</li>\n      {/each}\n    </ol>\n    {#await syncCompleted}\n      <button disabled>...</button>\n    {:then i}\n      <button\n        on:click={() => {\n          syncTable = []\n          syncDone = []\n          spotifyPlaylists = loadSpotifyPlaylists(spotifyUserId)\n        }}>\n        OK\n      </button>\n    {/await}\n  {/if}\n\n</main>\n"
  ],
  "names": [],
  "mappings": "AAmQE,gCAAG,CACD,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,QACjB,CACA,gCAAG,CACD,UAAU,CAAE,SACd,CACA,oCAAO,CACL,KAAK,CAAE,KAAK,CACZ,QAAQ,CAAE,MAAM,CAChB,OAAO,CAAE,GACX,CACA,gCAAG,CACD,MAAM,CAAE,IACV,CACA,mCAAM,CACJ,OAAO,CAAE,GACX,CACA,oBAAK,CAAC,iBAAE,WAAW,GAAG,CAAE,CACtB,UAAU,CAAE,IACd,CACA,mCAAM,CACJ,eAAe,CAAE,QACnB"
}